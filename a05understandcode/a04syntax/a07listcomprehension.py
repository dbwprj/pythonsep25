# Product quantities in the warehouse (units)
product_quantities = [20, 60, 150, 40, 90, 120, 150, 200]

# 1. List Comprehension: Create a list of squares for quantities greater than 50
quantity_squares = [x*2 for x in product_quantities if x > 50]

print("List comprehension - Squares of quantities greater than 50:", quantity_squares)

# 2. Set Comprehension: Create a set of squares for quantities greater than 50 (unique values)
quantity_square_set = {x**2 for x in product_quantities if x > 50}
print("Set comprehension - Unique squares of quantities greater than 50:", quantity_square_set)

# 3. Dictionary Comprehension: Create a dictionary of indices and squared quantities for products > 50
quantity_square_dict = {i: x**2 for i, x in enumerate(product_quantities) if x > 50}
print("Dictionary comprehension - Indices and squares of quantities greater than 50:", quantity_square_dict)

# 4. Generator Comprehension: Create a generator of squares for quantities greater than 50
quantity_square_gen = (x**2 for x in product_quantities if x > 50)

# Print all values generated by the generator (lazy evaluation)
print("Generator comprehension - Squares of quantities greater than 50 (lazy evaluation):")
for square in quantity_square_gen:
    print(square)

# List of product IDs and their corresponding product names
product_ids = [101, 102, 103, 104, 105]
product_names = ["Widget", "Gadget", "Doodad", "Thingamajig", "Whatsit"]

# Dictionary comprehension: Create a dictionary with product ID as the key and product name as the value
product_dict = {product_ids[i]: product_names[i] for i in range(len(product_ids))}

# Output the resulting dictionary
print(product_dict)



"""
List Comprehension: [expression for item in iterable] – Create lists concisely.

Set Comprehension: {expression for item in iterable} – Create sets with unique elements.

Dictionary Comprehension: 
{key_expression: value_expression for item in iterable} –
 Create dictionaries in a compact form.

Generator Comprehension: (expression for item in iterable) – Create generators that yield values lazily.

"""    

